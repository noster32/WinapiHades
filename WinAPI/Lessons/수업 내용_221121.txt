MainGame.h

#pragma once
#include "GameNode.h"
//#include "ClayShooting.h"
//#include "AvoidingPoop.h"
//#include "CrocodileTeeth.h"
//#include "ShapeRotation.h"
#include "Mole.h"
#include "Shooting.h"

class MainGame : public GameNode
{
private:
	// 비행기 배경
	/*GImage* _bgImage;
	GImage* _plImage;
	RECT _rc;*/

	// 11월 17일 과제
	//AvoidingPoop* _ap;
	//CrocodileTeeth* _cdt;

	//ShapeRotation* _sr;

	Mole* _mole;
	Shooting* _shooting;

public:
	HRESULT init(void);
	void release(void);
	void update(void);
	void render(HDC hdc);

	MainGame() {}
	~MainGame() {}

	//ClayShooting _clayShooting;
};

/*
	과제 1. 포토샵 설치

	 - 포토샵은 각 버전별로 단축키나 기능이 상이하다.


	과제 2. 포트폴리오 구체화 및 복습

	 - 두리뭉실한 선정이 아닌 명확한 장르 선정 (3개)과 선정 이유 작성. 메모장에 작성

	 - 수업 내용 복습


	이미지 추가1. 두더지 게임

	 - 상황에 맞는 이미지 필수

	 - 두더지 없을 때, 두더지 나왔을 때, 두더지 때렸을 때, 망치 (대기, 때렸을 때)

	 ※ 마우스 커서는 ShowCursor()를 이용한다. 커서는 false로 죽인다.


	이미지 추가2. 수업 슈팅게임

	- 상황에 맞는 이미지 필수


	한 줄 조사. 오늘 수업 내용 함수들. 카톡방 확인.
*/

//////////////////////////////////////////////////////////////////////////////////////////////

MainGame.cpp

#include "Stdafx.h"
#include "MainGame.h"
//#include "ClayShooting.h"

HRESULT MainGame::init(void)
{
	GameNode::init();
	// 수업 비행기와 배경
	/*
#pragma region 
	_bgImage = new GImage;
	_bgImage->init("Resources/Images/Background/DeadSpace.bmp", WINSIZE_X, WINSIZE_Y);

	_plImage = new GImage;
	_plImage->init("Resources/Images/Object/AirPlane.bmp", 173, 291, true, RGB(255, 0, 255));

	_rc = RectMakeCenter(WINSIZE_X / 2 - 500, WINSIZE_Y / 2 + 200, 173, 291);
#pragma endregion
	*/

	//_ap = new AvoidingPoop;
	//_ap->init();

	/*_cdt = new CrocodileTeeth;
	_cdt->init();*/

	/*_sr = new ShapeRotation;
	_sr->init();*/

	//_mole = new Mole;
	//_mole->init();

	_shooting = new Shooting;
	_shooting->init();

	return S_OK;
}

void MainGame::release(void)
{
	GameNode::release();

	// 수업 비행기와 배경
	/*
	SAFE_DELETE(_bgImage);
	SAFE_DELETE(_plImage);
	*/
	//delete _ap;
	//delete _cdt;

	//delete _sr;

	//delete _mole;
	SAFE_DELETE(_shooting);
}

void MainGame::update(void)
{
	GameNode::update();

	// 수업 비행기와 배경
	/*
	if (KEYMANAGER->isStateKeyDown(VK_RIGHT))
	{
		_rc.left += 5.0f;
		_rc.right += 5.0f;
	}

	if (KEYMANAGER->isStateKeyDown(VK_LEFT))
	{
		_rc.left -= 5.0f;
		_rc.right -= 5.0f;
	}

	if (KEYMANAGER->isStateKeyDown(VK_UP))
	{
		_rc.top -= 5.0f;
		_rc.bottom -= 5.0f;
	}

	if (KEYMANAGER->isStateKeyDown(VK_DOWN))
	{
		_rc.top += 5.0f;
		_rc.bottom += 5.0f;
	}*/

	//_cdt->update();

	//_sr->update();

	//_mole->update();
	_shooting->update();
}

void MainGame::render(HDC hdc)
{
	// 수업 비행기와 배경
	/*
#pragma region 수업 비행기와 배경
	// 백버퍼 얻어온다.
	HDC memDC = this->getBackBuffer()->getMemDC();
	// 검은색 빈 비트맵
	// PatBlt(): 사각형 영역에 주어진 브러시로 채우는 함수
	PatBlt(memDC, 0, 0, WINSIZE_X, WINSIZE_Y, BLACKNESS);

	_bgImage->render(memDC, 0, 0);

	if (KEYMANAGER->isToggleKey(VK_F1))
	{
		DrawRectMake(memDC, _rc);
	}

	_plImage->render(memDC, _rc.left, _rc.top);

	// 백퍼버의 내용을 HDC에 그린다.
	this->getBackBuffer()->render(hdc, 0, 0);
#pragma endregion
	*/

	/*
		유니코드 or 멀티바이트 지원 여부

		sprintf_s(): char 기반 (실수 서식 지원, 유니코드 X)
		 ㄴ CRT 라이브러리를 사용하는 함수
		wsprintf(): 문자열 합성 함수 (버퍼에 출력)
		 ㄴ 플랫폼 SDK에서 제공하는 함수, 실수형은 사용할 수 없다.
	*/

	/*sprintf_s(strPosition, "HP: %d", _player.hp);
	TextOut(hdc, 10, 40, strPosition, strlen(strPosition));*/

	// 1. 함수 위치
	// 2. 시간 설정

	/*
	Homework 221117
	_clayShooting.clayShooting(hdc, 1);
	_clayShooting.clayShooting(hdc, 99);
	_clayShooting.clayShooting(hdc, 2);

	_clayShooting.clayShooting(hdc, 0);
	_clayShooting.clayShooting(hdc, 88);*/

	/*_ap->apFunc(hdc, 98);
	_ap->apFunc(hdc, 0);
	_ap->apFunc(hdc, 88);
	_ap->apFunc(hdc, 1);*/

	/*_cdt->cDTeeth(hdc, 0);
	_cdt->cDTeeth(hdc, 1);*/

	/*_sr->shapeRot(hdc, 0);
	_sr->shapeRot(hdc, 1);*/

	//_mole->render(hdc);
	_shooting->render(hdc);
}

//////////////////////////////////////////////////////////////////////////////////////////////

GImage.h

#pragma once

/*
	GDI 장점
	 - 플랫폼, 애플리케이션을 가리지 않고 사용 가능. 호환성 좋음.
	 - 픽셀보간에서 매우 강력한 힘을 발휘함.

	GDI 단점
	 - RGB+A를 쓴다는 것.
*/

class GImage
{
public:
	enum IMAGE_LOAD_KIND
	{
		LOAD_RESOURCE = 0, LOAD_FILE,	// 리소스 로딩, 파일을 로딩
		LOAD_EMPTY, LOAD_END			// 빈 비트맵 로딩
	};

	// BYTE: U C 언사인드차
	// WORD: U S 언사인드숏
	// DWORD: U L 언사인드롱
	typedef struct tagImage
	{
		DWORD		resID;			// 리소스 ID
		HDC			hMemDC;			// 메모리 DC
		HBITMAP		hBit;			// 비트맵
		HBITMAP		hOBit;			// 올드 비트맵
		int			width;			// 이미지 가로크기
		int			height;			// 이미지 세로크기
		BYTE		loadType;		// 이미지 로드 타입

		tagImage()
		{
			resID = 0;
			hMemDC = nullptr;
			hBit = nullptr;
			hOBit = nullptr;
			width = 0;
			height = 0;
			loadType = LOAD_RESOURCE;
		}
	}IMAGE_INFO, *LPIMAGE_INFO;

private:
	LPIMAGE_INFO	_imageInfo;			// 이미지 정보
	char*			_fileName;			// 이미지 이름
	bool			_isTrans;			// 배경색
	COLORREF		_transColor;		// 배경색 없앨 RGB / RGB(255, 0, 255) 마젠타 색. 핫 핑크

	/*
		COLORREF
		 ㄴ 윈도우즈에서는 색상값을 표현하기 위해 COLORREF라는 데이터형을 사용한다.
		  ㄴ 부호 없는 32비트 정수형

		 ㄴ R, G, B 각각 1바이트(8비트)이며 0 ~255 범위의 농도를 가진다.
	*/
public:
	// WINAPI 자료형이 혼합된 형태
	// ㄴ 함수 오버로딩 규칙 조심
	HRESULT init(int width, int height);
	HRESULT init(const DWORD resID, int width, int height, bool isTrans = false,
		COLORREF transColor = RGB(0, 0, 0));
	HRESULT init(const char* fileName, int width, int height, bool isTrans = false,
		COLORREF transColor = RGB(0, 0, 0));

	void setTransColor(bool isTrans, COLORREF transColor);

	void release(void);

	void render(HDC hdc);
	void render(HDC hdc, int destX, int destY);

	inline HDC getMemDC(void) { return _imageInfo->hMemDC; }

	/*
		이미지 표현 기법
		 - 알파플렌딩, 루프(리미트), 프레임, ★클리핑(보이는 부분만 render에 적용시킴), 애니메이션
	*/

	GImage();
	~GImage() {}
};

//////////////////////////////////////////////////////////////////////////////////////////////

GImage.cpp

#include "Stdafx.h"
#include "GImage.h"

GImage::GImage() : _imageInfo(nullptr),
_fileName(nullptr),
_isTrans(false),
_transColor(RGB(0, 0, 0))
{
	// ! Do Nothing
}

HRESULT GImage::init(int width, int height)
{
	// 재초기화 방지용 / 이미지 정보에 값이 들어 있다면 해제부터 하겠다.
	if (_imageInfo != nullptr) this->release();

	HDC hdc = GetDC(_hWnd);

	_imageInfo = new IMAGE_INFO;
	_imageInfo->loadType = LOAD_EMPTY;
	_imageInfo->resID = 0;
	// bmp는 대용량이기에 메모리DC에 그림을 그렿놓고 화면에 출력하는 방식을 사용.
	// 메모리DC란 화면DC와 동일한 특성을 가지며 내부에 출력 표면을 가진 메모리 영역.
	_imageInfo->hMemDC = CreateCompatibleDC(hdc);
	// hdc와 호환되는 포맷의 bmp를 2, 3번째 인수의 크기로 만드는 함수
	_imageInfo->hBit = (HBITMAP)CreateCompatibleBitmap(hdc, width, height);
	_imageInfo->hOBit = (HBITMAP)SelectObject(_imageInfo->hMemDC, _imageInfo->hBit);
	_imageInfo->width = width;
	_imageInfo->height = height;

	_fileName = nullptr;

	_isTrans = false;
	_transColor = RGB(0, 0, 0);

	// 리소스 얻어오는데 실패
	if (_imageInfo->hBit == 0)
	{
		release();
		return E_FAIL;
	}

	// DC 해제
	ReleaseDC(_hWnd, hdc);

	return S_OK;
}

HRESULT GImage::init(const DWORD resID, int width, int height, bool isTrans, COLORREF transColor)
{
	if (_imageInfo != nullptr) this->release();

	HDC hdc = GetDC(_hWnd);

	_imageInfo = new IMAGE_INFO;
	_imageInfo->loadType = LOAD_RESOURCE;
	_imageInfo->resID = resID;
	_imageInfo->hMemDC = CreateCompatibleDC(hdc);
	// LoadBitmap(): 등록된 이미지를 불러오는 매크로
	// MAKEINTRESOURCE(): 숫자로 정의된 리소스 이름을 문자열 형태로 바꿔주는 매크로
	_imageInfo->hBit = (HBITMAP)LoadBitmap(_hInstance, MAKEINTRESOURCE(_imageInfo->resID));
	_imageInfo->hOBit = (HBITMAP)SelectObject(_imageInfo->hMemDC, _imageInfo->hBit);
	_imageInfo->width = width;
	_imageInfo->height = height;

	_fileName = nullptr;

	_isTrans = isTrans;
	_transColor = transColor;

	if (_imageInfo->hBit == 0)
	{
		release();
		return E_FAIL;
	}

	ReleaseDC(_hWnd, hdc);

	return S_OK;
}

HRESULT GImage::init(const char* fileName, int width, int height, bool isTrans, COLORREF transColor)
{
	if (_imageInfo != nullptr) this->release();

	HDC hdc = GetDC(_hWnd);

	_imageInfo = new IMAGE_INFO;
	_imageInfo->loadType = LOAD_FILE;
	_imageInfo->resID = 0;
	_imageInfo->hMemDC = CreateCompatibleDC(hdc);
	// LoadImage(): 비트맵, 아이콘, 커서 파일을 불러오는 함수
	_imageInfo->hBit = (HBITMAP)LoadImage(_hInstance, fileName, IMAGE_BITMAP, width, height, LR_LOADFROMFILE);
	_imageInfo->hOBit = (HBITMAP)SelectObject(_imageInfo->hMemDC, _imageInfo->hBit);
	_imageInfo->width = width;
	_imageInfo->height = height;

	// 예외처리

	int len = strlen(fileName);

	// 프로그래머가 공백을 넣었을 경우까지 생각해서 + 1
	_fileName = new char[len + 1];

	//strcpy_s: strcpy의 추가형. 중간인자 추가됨. 중간인자: 최대 길이. 오류방지.
	strcpy_s(_fileName, len + 1, fileName);

	_isTrans = isTrans;
	_transColor = transColor;

	if (_imageInfo->hBit == 0)
	{
		release();
		return E_FAIL;
	}

	ReleaseDC(_hWnd, hdc);

	return S_OK;
}

void GImage::setTransColor(bool isTrans, COLORREF transColor)
{
	_isTrans = isTrans;
	_transColor = transColor;
}

// 외부
void GImage::release(void)
{
	// 이미지 정보가 남아 있다면
	if (_imageInfo)
	{
		// 이미지 삭제
		SelectObject(_imageInfo->hMemDC, _imageInfo->hOBit);
		DeleteObject(_imageInfo->hOBit);
		DeleteDC(_imageInfo->hMemDC);

		// 포인터 삭제
		SAFE_DELETE(_imageInfo);
		SAFE_DELETE_ARRAY(_fileName);

		// 투명컬러키 초기화
		_isTrans = false;
		_transColor = RGB(0, 0, 0);
	}
}

// 0, 0
void GImage::render(HDC hdc)
{
	if (_isTrans)
	{
		// GdiTransparentBlt(): 비트맵을 불러올 때 특정 색상을 제외하고 복사
		GdiTransparentBlt
		(
			hdc,					// 복사할 장소의 DC (화면에 보여지는 DC)
			0,						// 복사될 좌표 시작 (X)
			0,						// 복사될 좌표 시작 (Y)
			_imageInfo->width,		// 복사될 이미지 가로크기
			_imageInfo->height,		// 복사될 이미지 세로크기
			_imageInfo->hMemDC,		// 복사될 대상 메모리DC
			0, 0,					// 복사 시작 시점
			_imageInfo->width,		// 복사 영역 가로크기
			_imageInfo->height,		// 복사 영역 세로크기
			_transColor				// 복사할 때 제외할 색상
		);
	}
	else
	{
		// BitBlt(): DC 간의 영역끼리 서로 고속복사를 해준다.
		// SRCCOPY(): 소스 영역을 대상 영역에 복사한다.
		BitBlt(hdc, 0, 0, _imageInfo->width, _imageInfo->height,
			_imageInfo->hMemDC, 0, 0, SRCCOPY);
	}
}

// GDI, GDI+, Direct는 좌상단이 0, 0이고, OpenGL은 좌하단이 0, 0
// destX, destY
void GImage::render(HDC hdc, int destX, int destY)
{
	if (_isTrans)
	{
		// GdiTransparentBlt(): 비트맵을 불러올 때 특정 색상을 제외하고 복사
		GdiTransparentBlt
		(
			hdc,					// 복사할 장소의 DC (화면에 보여지는 DC)
			destX,					// 복사될 좌표 시작 (X)
			destY,					// 복사될 좌표 시작 (Y)
			_imageInfo->width,		// 복사될 이미지 가로크기
			_imageInfo->height,		// 복사될 이미지 세로크기
			_imageInfo->hMemDC,		// 복사될 대상 메모리DC
			0, 0,					// 복사 시작 시점
			_imageInfo->width,		// 복사 영역 가로크기
			_imageInfo->height,		// 복사 영역 세로크기
			_transColor				// 복사할 때 제외할 색상
		);
	}
	else
	{
		// BitBlt(): DC 간의 영역끼리 서로 고속복사를 해준다.
		// SRCCOPY(): 소스 영역을 대상 영역에 복사한다.
		BitBlt(hdc, destX, destY, _imageInfo->width, _imageInfo->height,
			_imageInfo->hMemDC, 0, 0, SRCCOPY);
	}
}