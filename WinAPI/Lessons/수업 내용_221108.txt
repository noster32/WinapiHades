/////////////////////////////////////////////////////////////////////////////////////////////////
▶ 1일차

#include <Windows.h> //이거 없이는 윈도우즈를 구축할 수 없음.
#include <tchar.h>

//API 부터는 추론이 필요하다.

#pragma region 윈도우 API
/*
    API (Application Programming Interface)

     - 운영체제가 운영 프로그램 개발을 위해 제공하는 서브루틴 또는 함수의 집합

     - 명령어의 집합으로 애플리케이션 프로그램에서 오퍼레이팅 시스템의 기본적인 기능을 사용할
       필요가 있을 경우 API에서 명령어 호출이 진행된다.

     하드웨어 ------------------ 운영체제(windows) ------------------- 응용 프로그램
     (API 함수)//GPU사용이 안된다. 


    ▶ 장점

     - 운영체제가 같으면 같은 기능의 집합을 사용하기에 확장성 및 연동성, 그리고 유지보수가 편리
      ㄴ 윈도우즈 != 리눅스

     - 윈도우즈에서 지원하는 다양한 라이브러리 지원 가능.


    ▶ 단점

     - 플랫폼에 고착화.


    ▶ API 구조

     - API는 크게 진입점, 메시지 루프, Window Procedure로 나뉜다. // 필수 기억
*/
#pragma endregion

// 전역 변수
/*
인스턴스:
 ㄴ 윈도우 OS가 현재 실행되고 있는 프로그램을 확인하기 위한 값.
 ㄴ 같은 프로그램이면 같은 인스턴스 값을 가진다.
  ㄴ 클래스가 메모리에 실제로 구현된 실체.
 ㄴ 실행되고 있는 각각의 프로그램들.
*/
HINSTANCE _hInstance;

// 윈도우 핸들: 윈도우 창
HWND _hWnd;

//LPSTR // 롱포인터 스트링 Char*
//LPCSTR // 롱포인터 Canst Char
//LPCTSTR // Const tchar*

/*
    ▶ TCHAR

     - TCHAR형은 프로젝트의 문자셋 설정에 따라 자동적으로 char 또는 wchar_t로 type casting 되는
       중간 매크로 자료형이다.
       
     - 멀티 바이트와 유니 코드 환경에서 별도의 수정 작업없이 프로그램을 구동하기 위해서는 TCHAR
       형으로 문자열을 표현한는걸 추천
       
     - 일반적으로 윈도우 응용 프로그램에서 문자열 상수를 쓰기 위해서는 중간 설정에 따라
       char* 또는 wchar_t*로 변환해 주는 _T 매크로를 사용해야 한다.
*/

LPTSTR _lpszClass = TEXT("Windows API");
TCHAR* pszString = _T("Windows API"); // 위와 같은 결과. 느리지만 안정성이 높음.

// 콜백 // 엔진쪽에선 명칭이 델리게이트 // 체인링 // 챕터 시스템에서 사용하면 좋을것 같다. 면접질문 1
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

/*
hInstance: 프로그램 인스턴스 핸들
hPrevInstance: 이전에 실행된 인스턴스 핸들
IpszCmdParam: 명령형으로 입력된 프로그램 인수(자)
nCcmdShow: 프로그램이 시작될 형태 (최소화 or 보통 크기 등등..)
*/

/* 이게 맞다.
int WINAPI _tWinMain(HINSTANCE hInstance,
	                 HINSTANCE hPrevInstance,
	                 TCHAR*    lpszCmdParam,
	                 int       nCmdShow)
{

}
*/

// 윈도우 메인함수
int APIENTRY WinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPSTR     lpszCmdParam,
                     int       nCmdShow)
{
    // 해당되는 인스턴스를 전역변수에 담는다. 확장성 염두.
    _hInstance = hInstance;

    /*
    ▶ WinMain의 역할

    1. 윈도우 창을 셋팅 후 화면에 띄우기
        ㄴ 화면에 창을 띄우기 위해서는 4가지를 모두 처리해야 한다.

    2. 메세지 루프
    */

    /*
    WNDCLASS: 윈도우 창의 정보를 저장하기 위한 구조체
    ㄴ WNDCLASS 구조체는 윈도우즈 운영체제에게 윈도우 생성을 명령하기 위해서 커스텀한
       윈도우를 식별할 수 있는 정보등을 기록하는 역할을 한다.
    */

    // 1-1. 윈도우창 구조체 선언 및 초기화
    WNDCLASS wndClass; // 클래스 구조체 EXW 
    wndClass.cbClsExtra = 0;                                        // 클래스 여분 메모리
    wndClass.cbWndExtra = 0;                                        // 윈도우 여분 메모리
    wndClass.hbrBackground = (HBRUSH)GetStockObject (WHITE_BRUSH);  // 백그라운드
    wndClass.hCursor = LoadCursor(NULL, IDC_ARROW);                 // 마우스 커서
    wndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);               // 아이콘
    wndClass.hInstance = hInstance;                                 // 윈도우를 소요한 프로그램의 식별자 정보
    wndClass.lpfnWndProc = (WNDPROC)WndProc;                        // 윈도우 프로시져
    wndClass.lpszClassName = _lpszClass;                            // 클래스 이름 (윈도우 클래스 식별자)
    wndClass.lpszMenuName = NULL;                                   // 메뉴 이름
    wndClass.style = CS_HREDRAW | CS_VREDRAW;                       // 윈도우 스타일 (윈도우 다시 그리기 정보)

    // 1-2. 윈도우 클래스 등록
    RegisterClass(&wndClass);

    // 1-3. 화면에 보여줄 윈도우 창 생성
    _hWnd = CreateWindow
    (
        _lpszClass,                                // 윈도우 클래스 식별자
        _lpszClass,                                // 윈도우 타이틀 바 이름
        WS_OVERLAPPEDWINDOW,                       // 윈도우 스타일
        400,                                       // 윈도우 화면 X좌표
        100,                                       // 윈도우 화면 Y좌표
        800,                                       // 윈도우 화면 가로크기
        800,                                       // 윈도우 화면 세로크기
        NULL,                                      // 부모 윈도우 GetDesktopWindow()
        (HMENU)NULL,                               // 메뉴 핸들
        hInstance,                                 // 인스턴스 지정
        NULL                                       // 윈도우의 자식 윈도우를 생성하면 지정하고 아니라면 NULL
                                                   //  ㄴ 필요에 의해 사용하지만 지금은 NULL
    );

    // 1-4. 화면에 윈도우창 보여주기
    ShowWindow(_hWnd, nCmdShow);

    //UpdateWindow(_hWnd);

    // MSG: 운영체제에서 발생하는 메세지 정보를 저장하기 위한 구조체
    MSG message;
    //ZeroMemory(&msg, sizeof(msg));

    /*
    ▶ 메시지의 종류 // 면접질문 2

    1. GetMessage
    ㄴ 메시지를 꺼내올 수 있을때까지 멈춰있는 함수
    ㄴ GetMessage 함수는 메시지 큐로부터 하나의 메시지를 가져오는 역활을 한다.
    ㄴ 단, 메세지 큐가 비어있을 경우 (즉, 발생한 메시지가 없을 경우) 메시지가 들어올때까지
      대기한다.

    2. PeekMessage // 타이머를 배우면 사용할 예정
    ㄴ 메세지가 없더라도 반환 되는 함수
    */
    // 2. 메시지 루프                                      //장점: 하나씩 받는다 // 단점: 대량으로 받지못한다.
    while (GetMessage(&message, 0, 0, 0))
    {
            TranslateMessage(&message);
            DispatchMessage(&message);
    }

    /*
    TranslateMessage: 키보드의 입력 메세지 처리를 담당
                      입력된 키가 문자키인지 확인후 대문자 혹은 소문자,
                      한글, 영문이지에 대한 WN_CHAR 메세지를 발생 시킨다.

    DispatchMessage: 윈도우 프로시져에서 전달된 메세지를 실제 윈도우로 전달
    */

    return message.wParam;
}

// 윈도우 프로시져
LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
    /*
    ▶ Window Procedure

    - 메세지를 운영체제에 전달 -> 강제로 운영체제가 호출 해준다.
        ㄴ WinMain이 아닌, 운영체제에 의해 호출되는 콜백 함수
        ㄴ 윈도우를 생성 할 때는 반드시 지정을 해줘야 한다.

    ※ 윈도우 프로시저 내부에서는 윈도우에서 발생한 모든메세지를 처리하는 것이 아니라
    특정 메시지만을 처리하고 나머지 메세지는 DefWindowProc 함수가 처리하도록 로직을 설계
    하는것이 일반적이다.

    hWnd: 어느 윈도우에서 발생한 메시지인지 구분
    iMessage: 메시지 구분번호
    wParam: unsigned int 마우스 버튼의 상태, 키보드 조합 키의 상태를 전달
    lParam: unsigned lon 마우스 클릭 좌표를 전달

    */

	switch (iMessage)
	{

	case WM_CREATE:               // 생성자
		break;

	case WM_DESTROY:              // 소멸자
        /*
        ProtQuitMessage 함수는 메세지 큐에 Quit 메세지를 보내는 역활을 한다.
        즉, Quit 메세지를 수신하는 순간 GetMessage 함수가 FALSE를 반환함으로서
        메세지 루프가 종료된다.
        */
		PostQuitMessage(0);
		return 0;

	}

    // 윈도우 프로시저에서 처리되지 않은 나머지 메세지를 처리해준다.
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}

/*

어택. 윈도우 창 만들기

- 시간은 10분

- 실패시: 깜지 5번 x 못한 인원

한줄 조사

- 노트에 적어온다.

- CALLBACK Function, DC(HDC), GetDC / ReleaseDC, BeginPaint / EndPaint, WN_PAINT, PAINTSTRUCT

*/

/////////////////////////////////////////////////////////////////////////////////////////////////